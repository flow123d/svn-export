# CMAKE system TODO
#
# * make our own module FindPETSC  using native cmake support in PETSC version >3.2 
# * check external packages in FindPETSC, in particular Parmetis
# * better organisation of CMAKE files
#
# * use ExternalProject - feature of cmake >2.8, to automatically download and instal required libraries: boost, armadilo, petsc (with parmetis )
#   this way we can drop third_party directory; however for particular configuration of armadillo or petsc ( using particular libraries) one still need manual
#   installation of PETSc, so there should be posibility to indicate PETSC_DIR and PETSC_ARCH in makefile.in.cmake. But this file should be merly optional.
# 
# * use CTest to perform unit tests
# 
# * use CPack to  make Windows and Linux packages
#
# * possibly replace whole main makefile, this includes:
#       
#   - reproduce %.tst target in root dir in makefile generated by cmake
#   - build ngh and bcd ?? rather include them into flow123d
#   - clean and clean-all targets
#   - doxygen target    
#
# * how to organize flow123d libraries? I want:
#    1) each library should declare on which libraries it depends, but should not link against them (not contain them)
#       this setting should by automatically used in final linking
#    2) In particular third party libraries should not be part of any our library
#   - This requires carefull understanding of target_link_libraries commad, may be that this command DO NOT actualy
#     include library into library
#   - in that case how to produce flow123_lib EXPLICITELY containing all flow sub-libraries
#

# Include settings given by user first
set(CMAKE_INCLUDE_CURRENT_DIR ON)
include(${CMAKE_CURRENT_SOURCE_DIR}/makefile.in.cmake )


# Project name and language(s)
project(Flow123d CXX C)

# CMake version required for pre-build this project
cmake_minimum_required(VERSION 2.6.4)
if (${CMAKE_VERSION} VERSION_GREATER 2.8.4)
  cmake_policy(VERSION 2.8.4)
endif()


# Set all module paths
set(CMAKE_MODULE_PATH "${CMAKE_ROOT}/Modules")
list(APPEND CMAKE_MODULE_PATH "${Flow123d_SOURCE_DIR}/CMake/Modules")

#in_source builds should buitd in ./build subdirectory
# this doesn;t work :-(
#if (${CMAKE_BINARY_DIR} EQUAL ${CMAKE_SOURCE_DIR}) 
#  set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/build)
#endif()

######################################################################### find libraries

# We are looking for PETSC, f succed this module set:
#  PETSC_FOUND        - system has PETSc
#  PETSC_INCLUDES     - the PETSc include directories
#  PETSC_LIBRARIES    - Link these to use PETSc
#  PETSC_COMPILER     - Compiler used by PETSc, helpful to find a compatible MPI
#  PETSC_DEFINITIONS  - Compiler switches for using PETSc
#  PETSC_MPIEXEC      - Executable for running MPI programs
#  PETSC_VERSION      - Version string (MAJOR.MINOR.SUBMINOR)
find_package(PETSc REQUIRED)
find_package(PARMETIS REQUIRED)




# find boost or use our own

find_package(Boost)
if (NOT Boost_FOUND) 
  # just use our third_party directory
  set(BOOST_ROOT ${CMAKE_SOURCE_DIR}/third_party/boost-1.42)
  find_package(Boost)
  if (NOT Boost_FOUND)
    # force to use it 
    set(Boost_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/third_party/boost-1.42)
    set(Boost_LIBRARY_DIRS "")
    message(STATUS "Force to use our subset of Boost INCLUDE: ${Boost_INCLUDE_DIR} LIBS: ${Boost_LIBRARY_DIRS}")
  endif()
endif()

# find aramdillo or use our own
# FindAramdillo returs:
# Aramdillo_INCLUDE_DIRS
# Armadillo_LIBRARIES
find_package(Armadillo)
if (NOT Armadillo_FOUND)

  # THIS IS NOT CORRECT WAY TO BUILD Armadillo, IT MERLY WORKS. DO NOT FOLLOW THIS.
  # proper way should be: cmake, make, install Armadillo -> the last step should produce ArmadilloLibraryDepends.cmake
  # which can be included here to get correct includes and libs variables
  
  set(ARMADILLO_BUILD_DIR "${CMAKE_SOURCE_DIR}/third_party/armadillo-1.1.92/flow_build")
  file(MAKE_DIRECTORY "${ARMADILLO_BUILD_DIR}")
  execute_process(COMMAND ${CMAKE_COMMAND} -DCMAKE_PREFIX_PATH=${PETSC_DIR}/${PETSC_ARCH} -DBoost_DEBUG=1 -DBOOST_ROOT=${CMAKE_SOURCE_DIR}/third_party/boost-1.42 ..
                 WORKING_DIRECTORY "${ARMADILLO_BUILD_DIR}")
  execute_process(COMMAND make 
                 WORKING_DIRECTORY "${ARMADILLO_BUILD_DIR}")
  
  SET(Armadillo_INCLUDE_DIRS 
    ${CMAKE_SOURCE_DIR}/third_party/armadillo-1.1.92/flow_build/include
    ${CMAKE_SOURCE_DIR}/third_party/armadillo-1.1.92/include)  
  SET(Armadillo_LIBRARIES "${CMAKE_SOURCE_DIR}/third_party/armadillo-1.1.92/flow_build/libarmadillo.a")  
endif()

message(STATUS "Arma inc: ${Armadillo_INCLUDE_DIRS}")



# check for subversion and prepare generating of file with revision info.
find_package(Subversion REQUIRED)

# include the output directory, where the svnversion.h file is generated
include_directories(${CMAKE_CURRENT_BINARY_DIR})


################################################################### set includes and libraries paths
  
set(flow123d_includes
    ${CMAKE_SOURCE_DIR}/src
    ${CMAKE_SOURCE_DIR}/src/flow
    ${CMAKE_SOURCE_DIR}/src/mesh
    ${CMAKE_SOURCE_DIR}/src/reaction
    ${CMAKE_SOURCE_DIR}/src/system
    ${CMAKE_SOURCE_DIR}/src/semchem
    ${CMAKE_SOURCE_DIR}/src/transport
    ${CMAKE_SOURCE_DIR}/src/input
    ${CMAKE_SOURCE_DIR}/third_party/metis-4.0/Lib
    ${CMAKE_SOURCE_DIR}/third_party/fparser-4.4.3
    ${CMAKE_SOURCE_DIR}/third_party/json_spirit
    ${PETSC_INCLUDES}
    ${Boost_INCLUDE_DIR}
    ${Armadillo_INCLUDE_DIRS}
)
#message(STATUS "Flow123d inc: ${flow123d_includes}")
include_directories(${flow123d_includes})



#message(STATUS "libs: ${flow123d_external_libraries}")

##############
# set appropriate compiler flags for debug/release compilation modes
#add_definitions("-Wall")

if(CC_FLAGS) 
  add_definitions(${CC_FLAGS})
  set(CMAKE_EXE_LINKER_FLAGS ${CC_FLAGS})
else()
  if(CMAKE_BUILD_TYPE STREQUAL "debug")
    # debug mode
    add_definitions("-g -O0")
    set(CMAKE_EXE_LINKER_FLAGS "-g")
    add_definitions(-DDEBUG)
  else()
    # Release mode
    add_definitions("-O3")
    add_definitions(-DNDEBUG)
  endif()
endif()
##############

############################################################33 process subdirectories

# add json_sprit sources
add_subdirectory( ${CMAKE_SOURCE_DIR}/third_party/json_spirit )

# add fparser sources
add_subdirectory(third_party/fparser-4.4.3)

# add various our sources
add_subdirectory(src)
add_subdirectory(doc)
add_subdirectory(test_units)

#################################################################### add targets


#### make a script which call correct mpiexec (taken from PETSC)
# we can not use link, since mpiexec can be sript which reads its location from calling sequence
add_custom_target(mpiexec_link
    COMMAND ${CMAKE_COMMAND} -DSOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR} -DPETSC_MPIEXEC=${PETSC_MPIEXEC}
                         -P ${CMAKE_CURRENT_SOURCE_DIR}/CMake/Modules/Flow123d_mpiexec.cmake)

# ?? maybe we should use different statement, and possibly it is not neccessary at all
#set_source_files_properties(${CMAKE_BINARY_DIR}/bin/mpiexec PROPERTIES GENERATED true)



#### create rev_num.h - file with revision number

# a custom target - is always built -> call cmake script to generate rev_num.h
add_custom_target(rev_num_always 
    COMMAND ${CMAKE_COMMAND} -DSOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR}
                         -P ${CMAKE_CURRENT_SOURCE_DIR}/CMake/Modules/Flow123d_svn_rev_num.cmake)

# rev_num.h is a generated file
set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/rev_num.h
    PROPERTIES GENERATED TRUE
    HEADER_FILE_ONLY TRUE)



### add target for main binary
add_executable(flow123d src/main.cc)
# set libraries linked to main binary (order matter)
target_link_libraries(flow123d   flow123d_lib semchem)
set_target_properties(flow123d PROPERTIES
   RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin
   #OBJECT_DIR ${PROJECT_BINARY_DIR}/build/obj
)
# make mpiexec_link when executable is built
add_dependencies(flow123d rev_num_always mpiexec_link)
# explicitly say that source file depends on rev_num_always in order to have actual revision number
set_source_files_properties(src/main.cc OBJECT_DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/rev_num.h )


##### test target - actualy not used
#add_custom_target(benchmark-test 
#    COMMAND make testbase
#    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/tests
#)



#enable_testing()
#add_subdirectory(test_units)
#include(CTest)
