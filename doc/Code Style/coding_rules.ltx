% typesetting TODO
%
% - bibliography
% - METAFONT def of := ... \eqdef
% - tecky nad bold symbol se spatne umistuji
%
% conventions:
% crossrefs - typechap:name (type: [s]ection,[e]quation,[d]efinition,[t]heorem(lemma,..))
%                           (chap: [p]hysical background, [m]ath tools, [f]luid, [b]odies, [s]teady)
\documentclass[a4paper]{article}
% ***************************************** PACKAGES
%\usepackage[active]{srcltx}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage{fancyhdr}
\usepackage[utf8]{inputenc}
\usepackage[czech]{babel}
%\usepackage{mathbbol}
%\usepackage{bbm}
% ***************************************** THEOREMS
\newtheorem{thm}{Theorem}[section]
\newtheorem{proposition}[thm]{Proposition}
\newtheorem{definition}[thm]{Definition}
\newtheorem{remark}[thm]{Remark}
\newtheorem{lemma}[thm]{Lemma}
\newtheorem{corollary}[thm]{Corollary}
\numberwithin{equation}{section}
% ***************************************** SYMBOLS
\def\div{{\rm div}}
\def\Lapl{\Delta}
\def\grad{\nabla}
\def\supp{{\rm supp}}
\def\dist{{\rm dist}}
%\def\chset{\mathbbm{1}}
\def\chset{1}

\def\Tr{{\rm Tr}}
\def\sgn{{\rm sgn}}
\def\to{\rightarrow}
\def\weakto{\rightharpoonup}
\def\imbed{\hookrightarrow}
\def\cimbed{\subset\subset}
\def\range{{\mathcal R}}
\def\leprox{\lesssim}
\def\argdot{{\hspace{0.18em}\cdot\hspace{0.18em}}}
\def\Distr{{\mathcal D}}
\def\calK{{\mathcal K}}
\def\FromTo{|\rightarrow}
\def\convol{\star}
\def\impl{\Rightarrow}
\DeclareMathOperator*{\esslim}{esslim}
\DeclareMathOperator*{\esssup}{ess\,sup}
\DeclareMathOperator{\ess}{ess}
\DeclareMathOperator{\osc}{osc}
\DeclareMathOperator{\curl}{curl}

%\def\Ess{{\rm ess}}
%\def\Exp{{\rm exp}}
%\def\Implies{\Longrightarrow}
%\def\Equiv{\Longleftrightarrow}
% ****************************************** GENERAL MATH NOTATION
\def\Real{{\rm\bf R}}
\def\Rd{{{\rm\bf R}^{\rm 3}}}
\def\RN{{{\rm\bf R}^N}}
\def\D{{\mathbb D}}
\def\Nnum{{\mathbb N}}
\def\Measures{{\mathcal M}}
\def\d{\,{\rm d}}               % differential
\def\sdodt{\genfrac{}{}{}{1}{\rm d}{{\rm d}t}}
\def\dodt{\genfrac{}{}{}{}{\rm d}{{\rm d}t}}

\def\vc#1{\mathbf{\boldsymbol{#1}}}     % vector
\def\tn#1{{\mathbb{#1}}}    % tensor
\def\abs#1{\lvert#1\rvert}
\def\Abs#1{\bigl\lvert#1\bigr\rvert}
\def\bigabs#1{\bigl\lvert#1\bigr\rvert}
\def\Bigabs#1{\Big\lvert#1\Big\rvert}
\def\ABS#1{\left\lvert#1\right\rvert}
\def\norm#1{\bigl\Vert#1\bigr\Vert} %norm
\def\close#1{\overline{#1}}
\def\inter#1{#1^\circ}
\def\ol#1{\overline{#1}}
\def\ul#1{\underline{#1}}
\def\eqdef{\mathrel{\mathop:}=}     % defining equivalence
\def\where{\,|\,}                    % "where" separator in set's defs
\def\timeD#1{\dot{\overline{{#1}}}}

% ******************************************* USEFULL MACROS
\def\RomanEnum{\renewcommand{\labelenumi}{\rm (\roman{enumi})}}   % enumerate by roman numbers
\def\rf#1{(\ref{#1})}                                             % ref. shortcut
\def\prtl{\partial}                                        % partial deriv.
\def\Names#1{{\scshape #1}}
\def\rem#1{{\parskip=0cm\par!! {\sl\small #1} !!}}

\def\Xint#1{\mathchoice
{\XXint\displaystyle\textstyle{#1}}%
{\XXint\textstyle\scriptstyle{#1}}%
{\XXint\scriptstyle\scriptscriptstyle{#1}}%
{\XXint\scriptscriptstyle\scriptscriptstyle{#1}}%
\!\int}
\def\XXint#1#2#3{{\setbox0=\hbox{$#1{#2#3}{\int}$}
\vcenter{\hbox{$#2#3$}}\kern-.5\wd0}}
\def\ddashint{\Xint=}
\def\dashint{\Xint-}

% ******************************************* DOCUMENT NOTATIONS
% document specific
\def\rh{\varrho}
\def\vl{{\vc{u}}}
\def\th{\vartheta}
\def\vx{\vc{x}}
\def\vX{\vc{X}}
\def\vr{\vc{r}}
\def\veta{\vc{\eta}}
\def\dx{\,\d\vx}
\def\dt{\,\d t}
\def\bulk{\zeta}
\def\cS{\close{S}}
\def\eps{\varepsilon}
\def\phi{\varphi}
\def\Bog{{\mathcal B}}
\def\Riesz{{\mathcal R}}
\def\distr{\mathcal D}
\def\Item{$\bullet$}

\def\MEtst{\mathcal T}
%***************************************************************************
\def\vrb#1{\verb"#1"}

\addtolength{\textwidth}{5cm}
\addtolength{\hoffset}{-2.5cm}
\addtolength{\textheight}{4cm}
\addtolength{\voffset}{-3cm}
%\addtolength{\oddsidemargin}{1cm}
%\addtolength{\evensidemargin}{-1cm}
\begin{document}
\parindent=0pt
\parskip=0.3cm

\begin{center}
 {\Huge Flow123d code rules}
\end{center}

\section{Introduction}
This document contain code rules for Flow123d developers. These rules were created to
help developers to better understand the code of each other not to make your life harder.
They have no absolute priority, but please think twice if you break some of them.
Through this document we use {\tt typesetting font} for pieces of code, {\bf bold font}
to indicate main points, and {\it italics} for indroduction of new terms. The sections
are ordered from the most important to the less important.

\section{Naming conventions}
\begin{description}
 \item[Names are comments.] All names has to be meaningfull and has to be specific. If we use 
 good names we nedd less comments. {\bf Think} when you introduce new identificator. It will be with
 us "forever". Use english names, learn new words by coding :-].
 \item[Variables, functions / members, methods] have lowercase names with words separated by underscore. This holds also for shortcuts i.e. \verb"read_gmsh" not \verb"read_GMSH" \\
 Example: \verb"n_elements", \verb"make_partitioning()", \verb"mesh->n_elements", 
 \item[Structures, Classes, Templates, Typenames] are in mixed case, the first letter i the word is in uppercase. \\Example: \verb"Element", \verb"WaterLinSys"
 \item[Files] should contain just one principial class/structure and should have the same name
        as this class/structure, i.e. \verb"element.c". 
 \item[Preprocessor macros in upper case.] 
 \item[Template parameters] are uppercase letters. (C++ only)
 \item[Namespaces] in lower case. (C++ only)

 \item[Generic variables should have same name as their type.]~\\
         Example: \verb"solver_solve(Solver *solver,LinSys *lin_sys);"
 \item[Plural form of names of collections.] Example: \verb"Element elements[];"
 \item[Name of class/structure should be avoided in the name of members.]~\\
        Example: \verb"line.get_length(); // NOT: line.get_line_length();"
 \item[Variables with larger scope should have longer names.]
 \item[No abbreviations] in indentificators. At least don't use your own abbreviations !!!
 \item[Class members with underscore suffix.] Class members should be private and suffixed with underscore. This immediately say that it is not local variable of the method. (C++ only)
 
\end{description}


\section{Code organization rules and guidelines.}
\begin{description}
\item[Code for clarity rather then efficiancy.]
\item[Clean headers.] The header files should contain structure/class definitions and 
        function declarations. Function and method definitions should be in the corresponding source file. VERY short (one line) inline methods can be in class definition, larger ones directly
        after the class definition.
\item[Anti-multiple inclusion mechanism] has to be used for every header file. Example:
\begin{verbatim}
  #ifndef Solver_hh  // macro derived form filename is used
  #define Solver_hh
   // The rest of the file
  #endif
\end{verbatim}

\item[Avoid include in headers.] Think twice when including from header file. This easily leads to
        cross inclusion. When you need pointer to some other structure/class  you can use declaration instead of includsion of the definition. Example:
        \begin{verbatim}
        struct Element;         // declaration of structure Element
        struct Mesh {           // definition of structure that ...
            struct Element *elements; //... use pointers to Element
        }
        \end{verbatim}
  \item[Function declarations with names.] Always named arguments in function decclaration - simply copy the head of function definition. It really help understanding meanig of the arguments.
  Example: 
  \begin{verbatim}
        void print_solver_info(FILE *out,struct Solver *solver);
  \end{verbatim}
\item[Use typedef] for every structure/class. You can use the same name since typedefs lives
        in a separate namespace. Example:
  \begin{verbatim}
        struct Solver {
                ...
        }
        typedef struct Solver Solver;
  \end{verbatim}
\item[Use {\tt const}] keyword for function/method parameters that do not change.
        It simplify reading and involves optimization. How to use it? 
        \begin{verbatim}
        const int       i=1;            // constant integer
        const double    pi=3.114;       // real constant

        void function(const char *const_str, char * const const_ptr)
        // const_str is pointer to constant char (string), you can not change *const_str
        // const_ptr is constant pointer to char, you cna not change const_ptr

        char const *const_char;         //same as const chat *
        char const * const const_all;   //constant pointer to constant value
        \end{verbatim}
 \item[Warnings has to be checked] and possibly corrected.
\end{description}


Other guidelines:
\begin{description}
  \item[Use explicit type conversions.] Do not rely upon implicit type conversion, use explicit type
    conversion instead.
  \item[Use enums for named constants] instead of \verb"#define".
        Example: 
        \begin{verbatim}
        enum { red=0, green=1, blue=2 };  // anonymous enumeration, insted of macro constants
        enum Colors {red=0, green=1, blue=2}; // named enum. ; we can define variables 
        enum Colors my_color; // my_color have named values
        \end{verbatim}
  \item[Do not assume succes of function calls.] Program defensively. Check results of function
      calls, check prerequisities about function parameters.
  \item[Avoid complex conditions and statements in conditions.] Like:
  \begin{verbatim}
        if  ( (i<0) || (i>max) || (i==last) ) { } // too complex (two cond. together)

        if(!(file=open(fName,"w"))) { }           // statement in condition
  \end{verbatim}
  Rather use one more line:
  \begin{verbatim}
        bool isOutOfArray= (i<0) || (i>max);
        bool isRepeatedItem= (i==last);
        if  ( isOutOfArray || isRepeatedItem ) { } 

        file=open(fName,"w");
        if (!file) { }          
  \end{verbatim}
  \item[Avoid global variables.] If any, refer them with leading \verb"::" operator. 
   Example: \verb"::mainWindow.open();" (C++ only)
  \item[Avoid overloading] of functions and operators unless it brings clear improvements. (C++ only)
  \item[Do not overuse inline.] Do not use inline method when it calls another function or 
        contain cycle. (C++ only)
  \item[Use {\tt bool} type] for true/false variables. (C++ only)
  \item[Expose by {\tt typedef} template arguments.] (C++ only) Example:
  \begin{verbatim}
        template <typename T>
        class AFiniteElement{
        public:
                typedef T ElementShape;  // this provide meaning of template parameter
        };
  \end{verbatim}
\end{description}

\section{Current bad habits}
\begin{itemize}
        \item Declaration mess. No more \verb"header.h" and \verb"structs.h".
        \item Explicit nullify functions.
        \item Assertion tests are not separeted from real code.
        \item Too small functions (or too big). Minimal function should be about 5 lines
               of real code and max. two pages of whole code.
\end{itemize}

\section{Formating}
\begin{description}
 \item[Indent 4 spaces] nested blocks. Set your editor to insert spaces instead of tabs. Tabs have different size in different editors, which breaks formating.
 \item[Indent every block.] Always after you open a block with brace. Indent also statemet after
        \verb"if", \verb"for", \verb"while" etc.
        Example:
        \begin{verbatim}
        void fce() {
            int i;
            for (i=0; i<10; i++)
                if (i>5) {
                    printf("Over five.");
                }
        }   
        \end{verbatim}
 \item[Align when you split] the line. Insert an empty line when this is messed with next line. Example:
 \begin{verbatim}
        function(param1, param2,
                 param3);
        sum = a + b + c +
              d + e;
        if ( a < b  &&
             b < c) {

            printf();
        }    
 \end{verbatim}
\end{description}


\section{Debugging and assertions}
Debugging is essential. We provide sort of C macros to make easy implementation of 
assertion tests as prerequisities and postrequisities of functions and structure/class invariants.
These macros are automaticly removed (defined as empty) when the NODEBUG macro is defined. It means
normally the debugging is ON. There should be another sort of C++ macros using streams for 
output, which avoids separate macros for different number of parameters. Note that this problematics is ralated to the problem of system messages, which currently is supported by xprintf macro/function.

\begin{description}
 \item[CHKERR(i)] Check condition \verb"i", if it is \verb"false" abort the program.
 \item[CHKMSG(i,msg)] If \verb"i" is \verb"false" print string "msg" and abort.
 \item[CHKMSG1(i,msg,par1)] Similar, but allows include one parameter into printf before abort. Similar macros up to  \verb"CHKMSG3".
 \item[DBGMSG(msg)] Print debug message. (only when NODEBUG is not presented)
 \item[DBGMSG1(msg,par1)] Print debug message with parameter. And similarly up to \verb"DBGMSG3".
\end{description}

For C++ version (vision):
\begin{description}
 \item[ERROR\_MSG(M)] Output stream \verb"M" and abort the program. Should be more general like
  \verb"xprintf". Can not be suppressed by \verb"NODEBUG".
 \item[ASSERT(i,M)] If conditon \verb"i" is \verb"false" output stream "M" and abort.
\end{description}
This have several advantages. First we take rid of several parameters. Second, one can overload the 
redirection operator for output/debug stream and implement output for other objects, but still can use the same assertion macro.

\section{Documentation}
We use {\emph Doxygen} for source documentation. Basic function of Doxygen is to parse
sources, collect documentation for every source entity (provided by special comments) and
present all in HTML format with powerfull links. Doxygen process only comments
begining as \verb"/**" or \verb"/*!" or one line comments \verb"///" or \verb"//!".
Every comment is linked to the next source line and if there is a definition of some entity the comment is linked to this entity. You use comment \verb"///<" to link it to the previous entity, usefull for comments of structure members. 

All names of defined entities are automaticaly recognized in comments and linked to their documentation.

In the comment you can use number of formating keywords. Basic are:
\begin{description}
 \item \verb"@file" - file name documentation block
 \item \verb"@brief" - gives short description of the entity, appears besides title
 \item \verb"@param" - description of parameter of function. Name of the parameter follows the keyword, then the description. You can specify intention of the parameter [in], [out], [in,out].
 \item \verb"@{ ... @}" - you can group part of the source 
 \item \verb"@name" - gives name to the group that follows
 \item \verb"@f$ ... @f$" - instead of \dots you can write an inline Latex formula
 \item \verb"@f[ ... @f]" - instead of \dots you can write a centered Latex formula
 \item \verb"@todo" - some stuff to do
\end{description}
 For further details see :
\begin{verbatim}
        /// project web page 
        http://www.doxygen.org   
        /// quick reference sheet
        http://www.digilife.be/quickreferences/QRC/Doxygen%20Quick%20Reference.pdf    
\end{verbatim}
%
\begin{description}
 \item[Comments should be explanatory, not formal.] This is basic rule for code documentation. 
  If something is obvious for you now, it may not be obvious later and for others. Do not use 
  "clever tricks" unless VERY well documented.
 \item[Documentation of classes and structures.] Before every class or structure definition
 (in header file) there should be a documentation block. It should contain brief 
 description of class. And detailed description including implementation ideas, 
 invariants (properties that the class should satisfy) and usage. Through the structure/classes definition there should be description for every data member. Example:
 \begin{verbatim}
//**********************************************************************
/*! @brief Linear system structure accepted by Solver module.
 *  
 *  The system is based on PETSc matrix A and vector of RHS (b) and solution (x),
 *  both vectors are build on the regular arrays vx, vb.
 *  CSR storage are optional and generated on demand by LinSysSetCSR.
 */
struct LinSystem
{
        int     size;
        Mat     A;      //!< Petsc matrix of the problem
        Vec     b;      //!< PETSc vector of the right hand side
        Vec     x;      //!< PETSc vector of the solution
        double  *vx;    //!< Vector of solution
        double  *vb;    //!< RHS vector
        //! @name optional CSR storage        
        /// @{
        int             *i;     //!< i-vector for CSR storage
        int             *j;     //!< j-vector for CSR storage
        double  *a;             //!< a-vector for CSR storage
        /// @}
};
typedef struct LinSystem LinSystem;
\end{verbatim}

 \item[Documentation of method and functions.] Before every method/function definition (in a source file) there should be a documentation block containing: brief description and detailed description
 which includes description of in-parameters and out-parameters and return value. You should also mention 
 {\it prerequisities} i.e. any consideration about incoming parameters. There should be also {\it postrequisities} i.e. properties of out-parameters and return value.  Idealy pre- and post- requisities are tested in the function by assertion checks. Example:
\begin{verbatim}
//=============================================================================
/*! @brief Solves a given linear system.
 *
 * Call user selected internal or external solver.
 * @param[in] solver solver structure to use
 * @param[in,out] system linear system to solve, conatains also result
 *
 * @pre Initialized solver. Assembled system.
 * @post Valid solution.
 */

void solve_system( struct Solver *solver, struct LinSystem *system )
\end{verbatim}
\item[Documentation of files.] Every file should begin with documentation block. 
( Have to be specified... )
Example:
\begin{verbatim}
/*! @file
 * @brief       Unified interface to various linear solvers
 *
 * The only internal (linked) solver is PETSC KPS which is already interface 
 * to the number of direct and iterative solvers. Further several external
 * solvers are supported: MATLAB, ISOL (due to Pavel Jiranek)
 */
\end{verbatim}
\end{description}


\section{File extensions - mixing C and C++ }
The actual Flow123d is written in pure C, but the essential utility \verb"ngh" is written in 
C++. The aim is rewrite Flow123d also into C++ and include the functionality of \verb"ngh"
during this transition we can not avoid mixing of C and C++ code. To keep an order 
the \verb"*.h" and \verb"*.c" should be pure C sources. The \verb"*.hh" and \verb"*.cc" should be 
C sources with some C++ features (i.e. mixing sources). And finally \verb"*.hpp" and "\verb"*.cpp"
are pure C++ sources. During transition the number of mixed sources should be as small as possible.
 
\section{Performance guidelines}
\begin{description}
  \item[Code for clarity rather then efficiency.]
  \item[Performance note about function/method call.] Every function call cost at least passing the parameters and the call itself. Virtual method calls take about 3 memory access more. On modern
  processors a (indirect) function call break some optimisations. Result: Try to make functions
  reasonably large to make calls less costly. Use inline for small functions. Avoid small virtual methods (these can not be inlined - obviously).
  \item[Good optimisiation should also simplify design.]
\end{description}

\end{document}
